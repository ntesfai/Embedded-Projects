
bin/Debug/assignment4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000005a4  00000658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  00800110  00800110  00000668  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000df8  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000d0f  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00002173  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002184  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_18>
  4c:	0c 94 22 02 	jmp	0x444	; 0x444 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 39       	cpi	r26, 0x94	; 148
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 */

#include <avr/io.h>

int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62

    // Insert code

    while(1)
    ;
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0x8>

000000b0 <delay>:
 * future hardware changes.  Ideally a timer should be
 * used instead of a set of for loops.  Timers will be
 * taught later in the semester.
 */
void delay(unsigned int msec)
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	00 d0       	rcall	.+0      	; 0xb6 <delay+0x6>
  b6:	00 d0       	rcall	.+0      	; 0xb8 <delay+0x8>
  b8:	00 d0       	rcall	.+0      	; 0xba <delay+0xa>
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	9e 83       	std	Y+6, r25	; 0x06
  c0:	8d 83       	std	Y+5, r24	; 0x05
    volatile unsigned i,j ;  /* volatile prevents loops from being optimized away */

    /* outer loop, loops for specified number of milliseconds */
    for (i=0; i<msec; i++) {
  c2:	1a 82       	std	Y+2, r1	; 0x02
  c4:	19 82       	std	Y+1, r1	; 0x01
  c6:	12 c0       	rjmp	.+36     	; 0xec <delay+0x3c>
        /* inner loop, loops for 1 millisecond delay */
        for (j=0;j<LOOPS_PER_MSEC;j++) {}
  c8:	1c 82       	std	Y+4, r1	; 0x04
  ca:	1b 82       	std	Y+3, r1	; 0x03
  cc:	05 c0       	rjmp	.+10     	; 0xd8 <delay+0x28>
  ce:	8b 81       	ldd	r24, Y+3	; 0x03
  d0:	9c 81       	ldd	r25, Y+4	; 0x04
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	9c 83       	std	Y+4, r25	; 0x04
  d6:	8b 83       	std	Y+3, r24	; 0x03
  d8:	8b 81       	ldd	r24, Y+3	; 0x03
  da:	9c 81       	ldd	r25, Y+4	; 0x04
  dc:	88 3e       	cpi	r24, 0xE8	; 232
  de:	93 40       	sbci	r25, 0x03	; 3
  e0:	b0 f3       	brcs	.-20     	; 0xce <delay+0x1e>
void delay(unsigned int msec)
{
    volatile unsigned i,j ;  /* volatile prevents loops from being optimized away */

    /* outer loop, loops for specified number of milliseconds */
    for (i=0; i<msec; i++) {
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	9a 81       	ldd	r25, Y+2	; 0x02
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	9a 83       	std	Y+2, r25	; 0x02
  ea:	89 83       	std	Y+1, r24	; 0x01
  ec:	29 81       	ldd	r18, Y+1	; 0x01
  ee:	3a 81       	ldd	r19, Y+2	; 0x02
  f0:	8d 81       	ldd	r24, Y+5	; 0x05
  f2:	9e 81       	ldd	r25, Y+6	; 0x06
  f4:	28 17       	cp	r18, r24
  f6:	39 07       	cpc	r19, r25
  f8:	38 f3       	brcs	.-50     	; 0xc8 <delay+0x18>
        /* inner loop, loops for 1 millisecond delay */
        for (j=0;j<LOOPS_PER_MSEC;j++) {}
    }
}
  fa:	26 96       	adiw	r28, 0x06	; 6
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	f8 94       	cli
 100:	de bf       	out	0x3e, r29	; 62
 102:	0f be       	out	0x3f, r0	; 63
 104:	cd bf       	out	0x3d, r28	; 61
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <writestr>:
 * NOTE: uart_init() should be called this function
 *   is invoked for the first time or unpredictable
 *   UART behavior may result.
 */
void writestr(char * str)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	00 d0       	rcall	.+0      	; 0x112 <writestr+0x6>
 112:	00 d0       	rcall	.+0      	; 0x114 <writestr+0x8>
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	9c 83       	std	Y+4, r25	; 0x04
 11a:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int i;

    /* loop for each character in the string */
    for (i=0; str[i]!=0;i++) {
 11c:	1a 82       	std	Y+2, r1	; 0x02
 11e:	19 82       	std	Y+1, r1	; 0x01
 120:	0f c0       	rjmp	.+30     	; 0x140 <writestr+0x34>
        /* output the character to the UART */
        uart_writechar(str[i]);
 122:	2b 81       	ldd	r18, Y+3	; 0x03
 124:	3c 81       	ldd	r19, Y+4	; 0x04
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	9a 81       	ldd	r25, Y+2	; 0x02
 12a:	82 0f       	add	r24, r18
 12c:	93 1f       	adc	r25, r19
 12e:	fc 01       	movw	r30, r24
 130:	80 81       	ld	r24, Z
 132:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <uart_writechar>
void writestr(char * str)
{
    unsigned int i;

    /* loop for each character in the string */
    for (i=0; str[i]!=0;i++) {
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	9a 81       	ldd	r25, Y+2	; 0x02
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	9a 83       	std	Y+2, r25	; 0x02
 13e:	89 83       	std	Y+1, r24	; 0x01
 140:	2b 81       	ldd	r18, Y+3	; 0x03
 142:	3c 81       	ldd	r19, Y+4	; 0x04
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	9a 81       	ldd	r25, Y+2	; 0x02
 148:	82 0f       	add	r24, r18
 14a:	93 1f       	adc	r25, r19
 14c:	fc 01       	movw	r30, r24
 14e:	80 81       	ld	r24, Z
 150:	88 23       	and	r24, r24
 152:	39 f7       	brne	.-50     	; 0x122 <writestr+0x16>
        /* output the character to the UART */
        uart_writechar(str[i]);
    }
}
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <writehex8>:

/*An unsigned char gets converted into its ASCII equivalent (base 16)
simply get each nibble from the byte, this will be the index
to the hex array*/
void writehex8(unsigned char num)
{
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	65 97       	sbiw	r28, 0x15	; 21
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	f8 94       	cli
 170:	de bf       	out	0x3e, r29	; 62
 172:	0f be       	out	0x3f, r0	; 63
 174:	cd bf       	out	0x3d, r28	; 61
 176:	8d 8b       	std	Y+21, r24	; 0x15
    unsigned char rslt[2];
    unsigned char hex[] = {'0', '1', '2', '3', '4', '5', '6', '7',
 178:	80 e1       	ldi	r24, 0x10	; 16
 17a:	e0 e0       	ldi	r30, 0x00	; 0
 17c:	f1 e0       	ldi	r31, 0x01	; 1
 17e:	de 01       	movw	r26, r28
 180:	15 96       	adiw	r26, 0x05	; 5
 182:	01 90       	ld	r0, Z+
 184:	0d 92       	st	X+, r0
 186:	8a 95       	dec	r24
 188:	e1 f7       	brne	.-8      	; 0x182 <writehex8+0x20>
    '8', '9' , 'A', 'B', 'C', 'D', 'E', 'F'};
    unsigned char i;
    for(i = 0; i < 2; i++) {
 18a:	19 82       	std	Y+1, r1	; 0x01
 18c:	1b c0       	rjmp	.+54     	; 0x1c4 <writehex8+0x62>
        num >>= 4;
 18e:	8d 89       	ldd	r24, Y+21	; 0x15
 190:	82 95       	swap	r24
 192:	8f 70       	andi	r24, 0x0F	; 15
 194:	8d 8b       	std	Y+21, r24	; 0x15
        rslt[i] = hex[num];
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	88 2f       	mov	r24, r24
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	2d 89       	ldd	r18, Y+21	; 0x15
 19e:	22 2f       	mov	r18, r18
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	ae 01       	movw	r20, r28
 1a4:	4b 5f       	subi	r20, 0xFB	; 251
 1a6:	5f 4f       	sbci	r21, 0xFF	; 255
 1a8:	24 0f       	add	r18, r20
 1aa:	35 1f       	adc	r19, r21
 1ac:	f9 01       	movw	r30, r18
 1ae:	40 81       	ld	r20, Z
 1b0:	9e 01       	movw	r18, r28
 1b2:	2d 5f       	subi	r18, 0xFD	; 253
 1b4:	3f 4f       	sbci	r19, 0xFF	; 255
 1b6:	82 0f       	add	r24, r18
 1b8:	93 1f       	adc	r25, r19
 1ba:	fc 01       	movw	r30, r24
 1bc:	40 83       	st	Z, r20
{
    unsigned char rslt[2];
    unsigned char hex[] = {'0', '1', '2', '3', '4', '5', '6', '7',
    '8', '9' , 'A', 'B', 'C', 'D', 'E', 'F'};
    unsigned char i;
    for(i = 0; i < 2; i++) {
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	8f 5f       	subi	r24, 0xFF	; 255
 1c2:	89 83       	std	Y+1, r24	; 0x01
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	10 f3       	brcs	.-60     	; 0x18e <writehex8+0x2c>
        num >>= 4;
        rslt[i] = hex[num];
    }
    /*Now the array needs to be reversed since
    we started from the lsb*/
    unsigned char temp = rslt[1];
 1ca:	8c 81       	ldd	r24, Y+4	; 0x04
 1cc:	8a 83       	std	Y+2, r24	; 0x02
    rslt[1] = rslt[0];
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	8c 83       	std	Y+4, r24	; 0x04
    rslt[0] = temp;
 1d2:	8a 81       	ldd	r24, Y+2	; 0x02
 1d4:	8b 83       	std	Y+3, r24	; 0x03
    //iterate over the string and output each character
    for(i = 0; i < 2; i++)
 1d6:	19 82       	std	Y+1, r1	; 0x01
 1d8:	0f c0       	rjmp	.+30     	; 0x1f8 <writehex8+0x96>
        uart_writechar(rslt[i]);
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	88 2f       	mov	r24, r24
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	9e 01       	movw	r18, r28
 1e2:	2d 5f       	subi	r18, 0xFD	; 253
 1e4:	3f 4f       	sbci	r19, 0xFF	; 255
 1e6:	82 0f       	add	r24, r18
 1e8:	93 1f       	adc	r25, r19
 1ea:	fc 01       	movw	r30, r24
 1ec:	80 81       	ld	r24, Z
 1ee:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <uart_writechar>
    we started from the lsb*/
    unsigned char temp = rslt[1];
    rslt[1] = rslt[0];
    rslt[0] = temp;
    //iterate over the string and output each character
    for(i = 0; i < 2; i++)
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	8f 5f       	subi	r24, 0xFF	; 255
 1f6:	89 83       	std	Y+1, r24	; 0x01
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	70 f3       	brcs	.-36     	; 0x1da <writehex8+0x78>
        uart_writechar(rslt[i]);
}
 1fe:	65 96       	adiw	r28, 0x15	; 21
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	f8 94       	cli
 204:	de bf       	out	0x3e, r29	; 62
 206:	0f be       	out	0x3f, r0	; 63
 208:	cd bf       	out	0x3d, r28	; 61
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <writehex16>:

/*The unsigned int is coverted to its ASCII equivalent (base 16)
simply get each nibble from the bytes, this will be the index
into the hex array*/
void writehex16(unsigned int num)
{
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	67 97       	sbiw	r28, 0x17	; 23
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	de bf       	out	0x3e, r29	; 62
 220:	0f be       	out	0x3f, r0	; 63
 222:	cd bf       	out	0x3d, r28	; 61
 224:	9f 8b       	std	Y+23, r25	; 0x17
 226:	8e 8b       	std	Y+22, r24	; 0x16
    //unsigned char len = 3;
    unsigned char rslt[4];
    unsigned char hex[] = {'0', '1', '2', '3', '4', '5', '6', '7',
 228:	80 e1       	ldi	r24, 0x10	; 16
 22a:	e0 e0       	ldi	r30, 0x00	; 0
 22c:	f1 e0       	ldi	r31, 0x01	; 1
 22e:	de 01       	movw	r26, r28
 230:	16 96       	adiw	r26, 0x06	; 6
 232:	01 90       	ld	r0, Z+
 234:	0d 92       	st	X+, r0
 236:	8a 95       	dec	r24
 238:	e1 f7       	brne	.-8      	; 0x232 <writehex16+0x22>
    '8', '9' , 'A', 'B', 'C', 'D', 'E', 'F'};
    unsigned char i;
    for(i = 0; i < 4; i ++) {
 23a:	19 82       	std	Y+1, r1	; 0x01
 23c:	20 c0       	rjmp	.+64     	; 0x27e <writehex16+0x6e>
        num >>= 4;
 23e:	8e 89       	ldd	r24, Y+22	; 0x16
 240:	9f 89       	ldd	r25, Y+23	; 0x17
 242:	92 95       	swap	r25
 244:	82 95       	swap	r24
 246:	8f 70       	andi	r24, 0x0F	; 15
 248:	89 27       	eor	r24, r25
 24a:	9f 70       	andi	r25, 0x0F	; 15
 24c:	89 27       	eor	r24, r25
 24e:	9f 8b       	std	Y+23, r25	; 0x17
 250:	8e 8b       	std	Y+22, r24	; 0x16
        rslt[i] = hex[num];
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	88 2f       	mov	r24, r24
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	ae 01       	movw	r20, r28
 25a:	4a 5f       	subi	r20, 0xFA	; 250
 25c:	5f 4f       	sbci	r21, 0xFF	; 255
 25e:	2e 89       	ldd	r18, Y+22	; 0x16
 260:	3f 89       	ldd	r19, Y+23	; 0x17
 262:	24 0f       	add	r18, r20
 264:	35 1f       	adc	r19, r21
 266:	f9 01       	movw	r30, r18
 268:	40 81       	ld	r20, Z
 26a:	9e 01       	movw	r18, r28
 26c:	2e 5f       	subi	r18, 0xFE	; 254
 26e:	3f 4f       	sbci	r19, 0xFF	; 255
 270:	82 0f       	add	r24, r18
 272:	93 1f       	adc	r25, r19
 274:	fc 01       	movw	r30, r24
 276:	40 83       	st	Z, r20
    //unsigned char len = 3;
    unsigned char rslt[4];
    unsigned char hex[] = {'0', '1', '2', '3', '4', '5', '6', '7',
    '8', '9' , 'A', 'B', 'C', 'D', 'E', 'F'};
    unsigned char i;
    for(i = 0; i < 4; i ++) {
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	89 83       	std	Y+1, r24	; 0x01
 27e:	89 81       	ldd	r24, Y+1	; 0x01
 280:	84 30       	cpi	r24, 0x04	; 4
 282:	e8 f2       	brcs	.-70     	; 0x23e <writehex16+0x2e>
        rslt[i] = hex[num];
    }
    /*Now the array must be reversed since we started
    from the lsb*/
    //xor swap method found online: blog.refu.co/?p-804
    for(i = 0; i < 2; i++) {
 284:	19 82       	std	Y+1, r1	; 0x01
 286:	7b c0       	rjmp	.+246    	; 0x37e <writehex16+0x16e>
        rslt[i] ^= rslt[4-i-1];
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	88 2f       	mov	r24, r24
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	29 81       	ldd	r18, Y+1	; 0x01
 290:	22 2f       	mov	r18, r18
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	ae 01       	movw	r20, r28
 296:	4e 5f       	subi	r20, 0xFE	; 254
 298:	5f 4f       	sbci	r21, 0xFF	; 255
 29a:	24 0f       	add	r18, r20
 29c:	35 1f       	adc	r19, r21
 29e:	f9 01       	movw	r30, r18
 2a0:	60 81       	ld	r22, Z
 2a2:	29 81       	ldd	r18, Y+1	; 0x01
 2a4:	22 2f       	mov	r18, r18
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	43 e0       	ldi	r20, 0x03	; 3
 2aa:	50 e0       	ldi	r21, 0x00	; 0
 2ac:	fa 01       	movw	r30, r20
 2ae:	e2 1b       	sub	r30, r18
 2b0:	f3 0b       	sbc	r31, r19
 2b2:	9f 01       	movw	r18, r30
 2b4:	ae 01       	movw	r20, r28
 2b6:	4e 5f       	subi	r20, 0xFE	; 254
 2b8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ba:	24 0f       	add	r18, r20
 2bc:	35 1f       	adc	r19, r21
 2be:	f9 01       	movw	r30, r18
 2c0:	20 81       	ld	r18, Z
 2c2:	46 2f       	mov	r20, r22
 2c4:	42 27       	eor	r20, r18
 2c6:	9e 01       	movw	r18, r28
 2c8:	2e 5f       	subi	r18, 0xFE	; 254
 2ca:	3f 4f       	sbci	r19, 0xFF	; 255
 2cc:	82 0f       	add	r24, r18
 2ce:	93 1f       	adc	r25, r19
 2d0:	fc 01       	movw	r30, r24
 2d2:	40 83       	st	Z, r20
        rslt[4-i-1] ^= rslt[i];
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	88 2f       	mov	r24, r24
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	23 e0       	ldi	r18, 0x03	; 3
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	a9 01       	movw	r20, r18
 2e0:	48 1b       	sub	r20, r24
 2e2:	59 0b       	sbc	r21, r25
 2e4:	ca 01       	movw	r24, r20
 2e6:	29 81       	ldd	r18, Y+1	; 0x01
 2e8:	22 2f       	mov	r18, r18
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	43 e0       	ldi	r20, 0x03	; 3
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	ba 01       	movw	r22, r20
 2f2:	62 1b       	sub	r22, r18
 2f4:	73 0b       	sbc	r23, r19
 2f6:	9b 01       	movw	r18, r22
 2f8:	ae 01       	movw	r20, r28
 2fa:	4e 5f       	subi	r20, 0xFE	; 254
 2fc:	5f 4f       	sbci	r21, 0xFF	; 255
 2fe:	24 0f       	add	r18, r20
 300:	35 1f       	adc	r19, r21
 302:	f9 01       	movw	r30, r18
 304:	60 81       	ld	r22, Z
 306:	29 81       	ldd	r18, Y+1	; 0x01
 308:	22 2f       	mov	r18, r18
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	ae 01       	movw	r20, r28
 30e:	4e 5f       	subi	r20, 0xFE	; 254
 310:	5f 4f       	sbci	r21, 0xFF	; 255
 312:	24 0f       	add	r18, r20
 314:	35 1f       	adc	r19, r21
 316:	f9 01       	movw	r30, r18
 318:	20 81       	ld	r18, Z
 31a:	46 2f       	mov	r20, r22
 31c:	42 27       	eor	r20, r18
 31e:	9e 01       	movw	r18, r28
 320:	2e 5f       	subi	r18, 0xFE	; 254
 322:	3f 4f       	sbci	r19, 0xFF	; 255
 324:	82 0f       	add	r24, r18
 326:	93 1f       	adc	r25, r19
 328:	fc 01       	movw	r30, r24
 32a:	40 83       	st	Z, r20
        rslt[i] ^= rslt[4-i-1];
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	88 2f       	mov	r24, r24
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	29 81       	ldd	r18, Y+1	; 0x01
 334:	22 2f       	mov	r18, r18
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	ae 01       	movw	r20, r28
 33a:	4e 5f       	subi	r20, 0xFE	; 254
 33c:	5f 4f       	sbci	r21, 0xFF	; 255
 33e:	24 0f       	add	r18, r20
 340:	35 1f       	adc	r19, r21
 342:	f9 01       	movw	r30, r18
 344:	60 81       	ld	r22, Z
 346:	29 81       	ldd	r18, Y+1	; 0x01
 348:	22 2f       	mov	r18, r18
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	43 e0       	ldi	r20, 0x03	; 3
 34e:	50 e0       	ldi	r21, 0x00	; 0
 350:	fa 01       	movw	r30, r20
 352:	e2 1b       	sub	r30, r18
 354:	f3 0b       	sbc	r31, r19
 356:	9f 01       	movw	r18, r30
 358:	ae 01       	movw	r20, r28
 35a:	4e 5f       	subi	r20, 0xFE	; 254
 35c:	5f 4f       	sbci	r21, 0xFF	; 255
 35e:	24 0f       	add	r18, r20
 360:	35 1f       	adc	r19, r21
 362:	f9 01       	movw	r30, r18
 364:	20 81       	ld	r18, Z
 366:	46 2f       	mov	r20, r22
 368:	42 27       	eor	r20, r18
 36a:	9e 01       	movw	r18, r28
 36c:	2e 5f       	subi	r18, 0xFE	; 254
 36e:	3f 4f       	sbci	r19, 0xFF	; 255
 370:	82 0f       	add	r24, r18
 372:	93 1f       	adc	r25, r19
 374:	fc 01       	movw	r30, r24
 376:	40 83       	st	Z, r20
        rslt[i] = hex[num];
    }
    /*Now the array must be reversed since we started
    from the lsb*/
    //xor swap method found online: blog.refu.co/?p-804
    for(i = 0; i < 2; i++) {
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	89 83       	std	Y+1, r24	; 0x01
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	08 f4       	brcc	.+2      	; 0x386 <writehex16+0x176>
 384:	81 cf       	rjmp	.-254    	; 0x288 <writehex16+0x78>
        rslt[i] ^= rslt[4-i-1];
        rslt[4-i-1] ^= rslt[i];
        rslt[i] ^= rslt[4-i-1];
    }
}
 386:	67 96       	adiw	r28, 0x17	; 23
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	de bf       	out	0x3e, r29	; 62
 38e:	0f be       	out	0x3f, r0	; 63
 390:	cd bf       	out	0x3d, r28	; 61
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <blink_led>:

/* Student-provided function comments go here */
void blink_led(char *msg)
{
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	00 d0       	rcall	.+0      	; 0x39e <blink_led+0x6>
 39e:	cd b7       	in	r28, 0x3d	; 61
 3a0:	de b7       	in	r29, 0x3e	; 62
 3a2:	9a 83       	std	Y+2, r25	; 0x02
 3a4:	89 83       	std	Y+1, r24	; 0x01
    /* student-provided implementatino code goes here */
}
 3a6:	0f 90       	pop	r0
 3a8:	0f 90       	pop	r0
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <uart_init>:
 3b0:	0e 94 de 01 	call	0x3bc	; 0x3bc <serial_init>
 3b4:	78 94       	sei
 3b6:	08 95       	ret

000003b8 <uart_writechar>:
 3b8:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <serial_writechar>

000003bc <serial_init>:
 3bc:	10 92 c0 00 	sts	0x00C0, r1
 3c0:	87 e6       	ldi	r24, 0x67	; 103
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	90 93 c5 00 	sts	0x00C5, r25
 3c8:	80 93 c4 00 	sts	0x00C4, r24
 3cc:	e1 ec       	ldi	r30, 0xC1	; 193
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	88 e1       	ldi	r24, 0x18	; 24
 3d2:	80 83       	st	Z, r24
 3d4:	86 e0       	ldi	r24, 0x06	; 6
 3d6:	80 93 c2 00 	sts	0x00C2, r24
 3da:	80 81       	ld	r24, Z
 3dc:	80 6a       	ori	r24, 0xA0	; 160
 3de:	80 83       	st	Z, r24
 3e0:	08 95       	ret

000003e2 <__vector_18>:
 3e2:	1f 92       	push	r1
 3e4:	0f 92       	push	r0
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	0f 92       	push	r0
 3ea:	11 24       	eor	r1, r1
 3ec:	2f 93       	push	r18
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
 3f6:	80 91 12 01 	lds	r24, 0x0112
 3fa:	20 91 13 01 	lds	r18, 0x0113
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	82 1b       	sub	r24, r18
 402:	91 09       	sbc	r25, r1
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	8f 73       	andi	r24, 0x3F	; 63
 408:	99 27       	eor	r25, r25
 40a:	89 2b       	or	r24, r25
 40c:	79 f0       	breq	.+30     	; 0x42c <__vector_18+0x4a>
 40e:	e0 91 13 01 	lds	r30, 0x0113
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 91 c6 00 	lds	r24, 0x00C6
 418:	ec 5e       	subi	r30, 0xEC	; 236
 41a:	fe 4f       	sbci	r31, 0xFE	; 254
 41c:	80 83       	st	Z, r24
 41e:	80 91 13 01 	lds	r24, 0x0113
 422:	8f 5f       	subi	r24, 0xFF	; 255
 424:	8f 73       	andi	r24, 0x3F	; 63
 426:	80 93 13 01 	sts	0x0113, r24
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__vector_18+0x4e>
 42c:	80 91 c6 00 	lds	r24, 0x00C6
 430:	ff 91       	pop	r31
 432:	ef 91       	pop	r30
 434:	9f 91       	pop	r25
 436:	8f 91       	pop	r24
 438:	2f 91       	pop	r18
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <__vector_19>:
 444:	1f 92       	push	r1
 446:	0f 92       	push	r0
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	0f 92       	push	r0
 44c:	11 24       	eor	r1, r1
 44e:	2f 93       	push	r18
 450:	8f 93       	push	r24
 452:	9f 93       	push	r25
 454:	ef 93       	push	r30
 456:	ff 93       	push	r31
 458:	80 91 11 01 	lds	r24, 0x0111
 45c:	20 91 10 01 	lds	r18, 0x0110
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	82 1b       	sub	r24, r18
 464:	91 09       	sbc	r25, r1
 466:	8f 73       	andi	r24, 0x3F	; 63
 468:	99 27       	eor	r25, r25
 46a:	89 2b       	or	r24, r25
 46c:	79 f0       	breq	.+30     	; 0x48c <__vector_19+0x48>
 46e:	e0 91 10 01 	lds	r30, 0x0110
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	ec 5a       	subi	r30, 0xAC	; 172
 476:	fe 4f       	sbci	r31, 0xFE	; 254
 478:	80 81       	ld	r24, Z
 47a:	80 93 c6 00 	sts	0x00C6, r24
 47e:	80 91 10 01 	lds	r24, 0x0110
 482:	8f 5f       	subi	r24, 0xFF	; 255
 484:	8f 73       	andi	r24, 0x3F	; 63
 486:	80 93 10 01 	sts	0x0110, r24
 48a:	05 c0       	rjmp	.+10     	; 0x496 <__vector_19+0x52>
 48c:	80 91 c1 00 	lds	r24, 0x00C1
 490:	8f 7d       	andi	r24, 0xDF	; 223
 492:	80 93 c1 00 	sts	0x00C1, r24
 496:	ff 91       	pop	r31
 498:	ef 91       	pop	r30
 49a:	9f 91       	pop	r25
 49c:	8f 91       	pop	r24
 49e:	2f 91       	pop	r18
 4a0:	0f 90       	pop	r0
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	0f 90       	pop	r0
 4a6:	1f 90       	pop	r1
 4a8:	18 95       	reti

000004aa <serial_rxchars>:
 4aa:	80 91 13 01 	lds	r24, 0x0113
 4ae:	90 91 12 01 	lds	r25, 0x0112
 4b2:	89 1b       	sub	r24, r25
 4b4:	8f 73       	andi	r24, 0x3F	; 63
 4b6:	08 95       	ret

000004b8 <serial_popchar>:
 4b8:	80 91 13 01 	lds	r24, 0x0113
 4bc:	20 91 12 01 	lds	r18, 0x0112
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	82 1b       	sub	r24, r18
 4c4:	91 09       	sbc	r25, r1
 4c6:	8f 73       	andi	r24, 0x3F	; 63
 4c8:	99 27       	eor	r25, r25
 4ca:	89 2b       	or	r24, r25
 4cc:	69 f0       	breq	.+26     	; 0x4e8 <serial_popchar+0x30>
 4ce:	e0 91 12 01 	lds	r30, 0x0112
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	ec 5e       	subi	r30, 0xEC	; 236
 4d6:	fe 4f       	sbci	r31, 0xFE	; 254
 4d8:	80 81       	ld	r24, Z
 4da:	90 91 12 01 	lds	r25, 0x0112
 4de:	9f 5f       	subi	r25, 0xFF	; 255
 4e0:	9f 73       	andi	r25, 0x3F	; 63
 4e2:	90 93 12 01 	sts	0x0112, r25
 4e6:	08 95       	ret
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	08 95       	ret

000004ec <serial_writechar>:
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	07 fe       	sbrs	r0, 7
 4f0:	0e c0       	rjmp	.+28     	; 0x50e <serial_writechar+0x22>
 4f2:	20 91 10 01 	lds	r18, 0x0110
 4f6:	90 91 11 01 	lds	r25, 0x0111
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	29 1b       	sub	r18, r25
 4fe:	31 09       	sbc	r19, r1
 500:	21 50       	subi	r18, 0x01	; 1
 502:	31 09       	sbc	r19, r1
 504:	2f 73       	andi	r18, 0x3F	; 63
 506:	33 27       	eor	r19, r19
 508:	23 2b       	or	r18, r19
 50a:	99 f3       	breq	.-26     	; 0x4f2 <serial_writechar+0x6>
 50c:	0d c0       	rjmp	.+26     	; 0x528 <serial_writechar+0x3c>
 50e:	20 91 10 01 	lds	r18, 0x0110
 512:	90 91 11 01 	lds	r25, 0x0111
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	29 1b       	sub	r18, r25
 51a:	31 09       	sbc	r19, r1
 51c:	21 50       	subi	r18, 0x01	; 1
 51e:	31 09       	sbc	r19, r1
 520:	2f 73       	andi	r18, 0x3F	; 63
 522:	33 27       	eor	r19, r19
 524:	23 2b       	or	r18, r19
 526:	61 f0       	breq	.+24     	; 0x540 <serial_writechar+0x54>
 528:	e0 91 11 01 	lds	r30, 0x0111
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	ec 5a       	subi	r30, 0xAC	; 172
 530:	fe 4f       	sbci	r31, 0xFE	; 254
 532:	80 83       	st	Z, r24
 534:	80 91 11 01 	lds	r24, 0x0111
 538:	8f 5f       	subi	r24, 0xFF	; 255
 53a:	8f 73       	andi	r24, 0x3F	; 63
 53c:	80 93 11 01 	sts	0x0111, r24
 540:	80 91 c1 00 	lds	r24, 0x00C1
 544:	80 62       	ori	r24, 0x20	; 32
 546:	80 93 c1 00 	sts	0x00C1, r24
 54a:	08 95       	ret

0000054c <serial_writestr>:
 54c:	1f 93       	push	r17
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	ec 01       	movw	r28, r24
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	11 e0       	ldi	r17, 0x01	; 1
 558:	19 0f       	add	r17, r25
 55a:	fe 01       	movw	r30, r28
 55c:	e9 0f       	add	r30, r25
 55e:	f1 1d       	adc	r31, r1
 560:	80 81       	ld	r24, Z
 562:	88 23       	and	r24, r24
 564:	21 f0       	breq	.+8      	; 0x56e <serial_writestr+0x22>
 566:	0e 94 76 02 	call	0x4ec	; 0x4ec <serial_writechar>
 56a:	91 2f       	mov	r25, r17
 56c:	f4 cf       	rjmp	.-24     	; 0x556 <serial_writestr+0xa>
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	1f 91       	pop	r17
 574:	08 95       	ret

00000576 <serial_writestr_P>:
 576:	1f 93       	push	r17
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	ec 01       	movw	r28, r24
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	11 e0       	ldi	r17, 0x01	; 1
 582:	19 0f       	add	r17, r25
 584:	fe 01       	movw	r30, r28
 586:	e9 0f       	add	r30, r25
 588:	f1 1d       	adc	r31, r1
 58a:	84 91       	lpm	r24, Z
 58c:	88 23       	and	r24, r24
 58e:	21 f0       	breq	.+8      	; 0x598 <serial_writestr_P+0x22>
 590:	0e 94 76 02 	call	0x4ec	; 0x4ec <serial_writechar>
 594:	91 2f       	mov	r25, r17
 596:	f4 cf       	rjmp	.-24     	; 0x580 <serial_writestr_P+0xa>
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	1f 91       	pop	r17
 59e:	08 95       	ret

000005a0 <_exit>:
 5a0:	f8 94       	cli

000005a2 <__stop_program>:
 5a2:	ff cf       	rjmp	.-2      	; 0x5a2 <__stop_program>
