
bin/Debug/assignment3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000010c  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .stab         00000840  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000be4  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define DDRB (*((volatile char*)0x24))
#define PINB (*((volatile char*)0x23))

void delay();

int main(void) {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62

    // Insert code
    DDRB |= 0x02;
  88:	84 e2       	ldi	r24, 0x24	; 36
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	24 e2       	ldi	r18, 0x24	; 36
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	f9 01       	movw	r30, r18
  92:	20 81       	ld	r18, Z
  94:	22 60       	ori	r18, 0x02	; 2
  96:	fc 01       	movw	r30, r24
  98:	20 83       	st	Z, r18

    while(1){
        delay();
  9a:	0e 94 55 00 	call	0xaa	; 0xaa <delay>
        PINB = 0x02;
  9e:	83 e2       	ldi	r24, 0x23	; 35
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	22 e0       	ldi	r18, 0x02	; 2
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
    }
  a8:	f8 cf       	rjmp	.-16     	; 0x9a <main+0x1a>

000000aa <delay>:


    return 0;
}

void delay() {
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	00 d0       	rcall	.+0      	; 0xb0 <delay+0x6>
  b0:	00 d0       	rcall	.+0      	; 0xb2 <delay+0x8>
  b2:	00 d0       	rcall	.+0      	; 0xb4 <delay+0xa>
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
    int count = 0;
  b8:	1e 82       	std	Y+6, r1	; 0x06
  ba:	1d 82       	std	Y+5, r1	; 0x05
    unsigned int i;
    unsigned int j;
    while(count != 15){
  bc:	18 c0       	rjmp	.+48     	; 0xee <delay+0x44>
        for(i = 0; i < 65535; i++){
  be:	1a 82       	std	Y+2, r1	; 0x02
  c0:	19 82       	std	Y+1, r1	; 0x01
  c2:	11 c0       	rjmp	.+34     	; 0xe6 <delay+0x3c>
            for(j = 0; j < 65535; j++)
  c4:	1c 82       	std	Y+4, r1	; 0x04
  c6:	1b 82       	std	Y+3, r1	; 0x03
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <delay+0x2a>
  ca:	8b 81       	ldd	r24, Y+3	; 0x03
  cc:	9c 81       	ldd	r25, Y+4	; 0x04
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	9c 83       	std	Y+4, r25	; 0x04
  d2:	8b 83       	std	Y+3, r24	; 0x03
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	9c 81       	ldd	r25, Y+4	; 0x04
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	b9 f7       	brne	.-18     	; 0xca <delay+0x20>
void delay() {
    int count = 0;
    unsigned int i;
    unsigned int j;
    while(count != 15){
        for(i = 0; i < 65535; i++){
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	9a 81       	ldd	r25, Y+2	; 0x02
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	9a 83       	std	Y+2, r25	; 0x02
  e4:	89 83       	std	Y+1, r24	; 0x01
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	9a 81       	ldd	r25, Y+2	; 0x02
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	59 f7       	brne	.-42     	; 0xc4 <delay+0x1a>

void delay() {
    int count = 0;
    unsigned int i;
    unsigned int j;
    while(count != 15){
  ee:	8d 81       	ldd	r24, Y+5	; 0x05
  f0:	9e 81       	ldd	r25, Y+6	; 0x06
  f2:	0f 97       	sbiw	r24, 0x0f	; 15
  f4:	21 f7       	brne	.-56     	; 0xbe <delay+0x14>
        for(i = 0; i < 65535; i++){
            for(j = 0; j < 65535; j++)
            {}
        }
    }
}
  f6:	26 96       	adiw	r28, 0x06	; 6
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	0f be       	out	0x3f, r0	; 63
 100:	cd bf       	out	0x3d, r28	; 61
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
