
bin/Debug/assignment5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000005a4  00000658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  0080013a  0080013a  00000692  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000692  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000b88  00000000  00000000  00000698  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000c10  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00001e30  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e44  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a8 01 	jmp	0x350	; 0x350 <__vector_18>
  4c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3b       	cpi	r26, 0xBE	; 190
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 87 02 	call	0x50e	; 0x50e <main>
  9e:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <temp_init>:
  atmega328p such that the ADC is enabled, reference voltage is 1.1v,
  the channel is set to read from the internal temperature sensor and
  the divisor is at 64*/
void temp_init() {
    //Enable the ADC and set the divisor
    ADCSRA |= (1 << 7) | (1 << 2) | (1 << 1);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	86 68       	ori	r24, 0x86	; 134
  ae:	80 83       	st	Z, r24
    //Set the channel to the internal temperature sensor
    //Sets the appropriate reference voltage
    ADMUX |= (1 << 7) | (1 << 6) | (1 << 3);
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 6c       	ori	r24, 0xC8	; 200
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <temp_is_data_ready>:
  high or low. If it is high that means the conversion from analog to
  digital is not yet finished, return 0. Otherwise return 1 if the ADSC
  is low.*/
int temp_is_data_ready(){
    //The and operation checks the sixth bit in the ADCSRA register
    if(! (ADCSRA & 1 << 6) )
  bc:	80 91 7a 00 	lds	r24, 0x007A
  c0:	82 95       	swap	r24
  c2:	86 95       	lsr	r24
  c4:	86 95       	lsr	r24
  c6:	83 70       	andi	r24, 0x03	; 3
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	89 27       	eor	r24, r25
        return 1;
    else return 0;
}
  cc:	81 70       	andi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	08 95       	ret

000000d2 <temp_start>:

    This method sets the ADSC bit in the ADCSRA register.
    This starts the conversion of analog input to digital.
*/
void temp_start() {
    ADCSRA |= 1 << 6;
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <temp_get>:
  de:	80 91 78 00 	lds	r24, 0x0078
  e2:	20 91 79 00 	lds	r18, 0x0079
  e6:	02 2e       	mov	r0, r18
  e8:	00 0c       	add	r0, r0
  ea:	33 0b       	sbc	r19, r19
  ec:	32 2f       	mov	r19, r18
  ee:	22 27       	eor	r18, r18
  f0:	08 2e       	mov	r0, r24
  f2:	00 0c       	add	r0, r0
  f4:	99 0b       	sbc	r25, r25
  f6:	28 2b       	or	r18, r24
  f8:	39 2b       	or	r19, r25
  fa:	45 e6       	ldi	r20, 0x65	; 101
  fc:	42 9f       	mul	r20, r18
  fe:	c0 01       	movw	r24, r0
 100:	43 9f       	mul	r20, r19
 102:	90 0d       	add	r25, r0
 104:	11 24       	eor	r1, r1
 106:	64 e6       	ldi	r22, 0x64	; 100
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	0e 94 a8 02 	call	0x550	; 0x550 <__divmodhi4>
 10e:	cb 01       	movw	r24, r22
 110:	81 51       	subi	r24, 0x11	; 17
 112:	91 40       	sbci	r25, 0x01	; 1
 114:	08 95       	ret

00000116 <delay>:
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	00 d0       	rcall	.+0      	; 0x11c <delay+0x6>
 11c:	00 d0       	rcall	.+0      	; 0x11e <delay+0x8>
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	1c 82       	std	Y+4, r1	; 0x04
 124:	1b 82       	std	Y+3, r1	; 0x03
 126:	2b 81       	ldd	r18, Y+3	; 0x03
 128:	3c 81       	ldd	r19, Y+4	; 0x04
 12a:	28 17       	cp	r18, r24
 12c:	39 07       	cpc	r19, r25
 12e:	a8 f4       	brcc	.+42     	; 0x15a <delay+0x44>
 130:	1a 82       	std	Y+2, r1	; 0x02
 132:	19 82       	std	Y+1, r1	; 0x01
 134:	29 81       	ldd	r18, Y+1	; 0x01
 136:	3a 81       	ldd	r19, Y+2	; 0x02
 138:	28 3e       	cpi	r18, 0xE8	; 232
 13a:	33 40       	sbci	r19, 0x03	; 3
 13c:	38 f4       	brcc	.+14     	; 0x14c <delay+0x36>
 13e:	29 81       	ldd	r18, Y+1	; 0x01
 140:	3a 81       	ldd	r19, Y+2	; 0x02
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	3f 4f       	sbci	r19, 0xFF	; 255
 146:	3a 83       	std	Y+2, r19	; 0x02
 148:	29 83       	std	Y+1, r18	; 0x01
 14a:	f4 cf       	rjmp	.-24     	; 0x134 <delay+0x1e>
 14c:	2b 81       	ldd	r18, Y+3	; 0x03
 14e:	3c 81       	ldd	r19, Y+4	; 0x04
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	3f 4f       	sbci	r19, 0xFF	; 255
 154:	3c 83       	std	Y+4, r19	; 0x04
 156:	2b 83       	std	Y+3, r18	; 0x03
 158:	e6 cf       	rjmp	.-52     	; 0x126 <delay+0x10>
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <led_init>:
 168:	21 9a       	sbi	0x04, 1	; 4
 16a:	29 98       	cbi	0x05, 1	; 5
 16c:	08 95       	ret

0000016e <led_on>:
 16e:	29 9a       	sbi	0x05, 1	; 5
 170:	08 95       	ret

00000172 <led_off>:
 172:	29 98       	cbi	0x05, 1	; 5
 174:	08 95       	ret

00000176 <led_ison>:
 176:	85 b1       	in	r24, 0x05	; 5
 178:	86 95       	lsr	r24
 17a:	81 70       	andi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	08 95       	ret

00000180 <led_blink>:
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	00 d0       	rcall	.+0      	; 0x18a <led_blink+0xa>
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	89 83       	std	Y+1, r24	; 0x01
 190:	9a 83       	std	Y+2, r25	; 0x02
 192:	0e 94 b9 00 	call	0x172	; 0x172 <led_off>
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	08 2f       	mov	r16, r24
 19a:	9a 81       	ldd	r25, Y+2	; 0x02
 19c:	19 2f       	mov	r17, r25
 19e:	f8 01       	movw	r30, r16
 1a0:	81 91       	ld	r24, Z+
 1a2:	8f 01       	movw	r16, r30
 1a4:	88 23       	and	r24, r24
 1a6:	d9 f0       	breq	.+54     	; 0x1de <led_blink+0x5e>
 1a8:	8e 32       	cpi	r24, 0x2E	; 46
 1aa:	29 f4       	brne	.+10     	; 0x1b6 <led_blink+0x36>
 1ac:	0e 94 b7 00 	call	0x16e	; 0x16e <led_on>
 1b0:	8a ef       	ldi	r24, 0xFA	; 250
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	06 c0       	rjmp	.+12     	; 0x1c2 <led_blink+0x42>
 1b6:	8d 32       	cpi	r24, 0x2D	; 45
 1b8:	59 f4       	brne	.+22     	; 0x1d0 <led_blink+0x50>
 1ba:	0e 94 b7 00 	call	0x16e	; 0x16e <led_on>
 1be:	8e ee       	ldi	r24, 0xEE	; 238
 1c0:	92 e0       	ldi	r25, 0x02	; 2
 1c2:	0e 94 8b 00 	call	0x116	; 0x116 <delay>
 1c6:	0e 94 b9 00 	call	0x172	; 0x172 <led_off>
 1ca:	84 e6       	ldi	r24, 0x64	; 100
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <led_blink+0x58>
 1d0:	80 32       	cpi	r24, 0x20	; 32
 1d2:	29 f7       	brne	.-54     	; 0x19e <led_blink+0x1e>
 1d4:	88 ee       	ldi	r24, 0xE8	; 232
 1d6:	93 e0       	ldi	r25, 0x03	; 3
 1d8:	0e 94 8b 00 	call	0x116	; 0x116 <delay>
 1dc:	e0 cf       	rjmp	.-64     	; 0x19e <led_blink+0x1e>
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	08 95       	ret

000001ec <uart_init>:
 1ec:	0e 94 95 01 	call	0x32a	; 0x32a <serial_init>
 1f0:	78 94       	sei
 1f2:	08 95       	ret

000001f4 <uart_writechar>:
 1f4:	0c 94 2d 02 	jmp	0x45a	; 0x45a <serial_writechar>

000001f8 <uart_writestr>:
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ec 01       	movw	r28, r24
 1fe:	89 91       	ld	r24, Y+
 200:	88 23       	and	r24, r24
 202:	19 f0       	breq	.+6      	; 0x20a <uart_writestr+0x12>
 204:	0e 94 2d 02 	call	0x45a	; 0x45a <serial_writechar>
 208:	fa cf       	rjmp	.-12     	; 0x1fe <uart_writestr+0x6>
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <uart_writehex8>:
 210:	cf 93       	push	r28
 212:	c8 2f       	mov	r28, r24
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	24 e0       	ldi	r18, 0x04	; 4
 218:	95 95       	asr	r25
 21a:	87 95       	ror	r24
 21c:	2a 95       	dec	r18
 21e:	e1 f7       	brne	.-8      	; 0x218 <uart_writehex8+0x8>
 220:	8a 30       	cpi	r24, 0x0A	; 10
 222:	10 f4       	brcc	.+4      	; 0x228 <uart_writehex8+0x18>
 224:	80 5d       	subi	r24, 0xD0	; 208
 226:	01 c0       	rjmp	.+2      	; 0x22a <uart_writehex8+0x1a>
 228:	89 5c       	subi	r24, 0xC9	; 201
 22a:	0e 94 2d 02 	call	0x45a	; 0x45a <serial_writechar>
 22e:	8c 2f       	mov	r24, r28
 230:	8f 70       	andi	r24, 0x0F	; 15
 232:	8a 30       	cpi	r24, 0x0A	; 10
 234:	10 f0       	brcs	.+4      	; 0x23a <uart_writehex8+0x2a>
 236:	89 5c       	subi	r24, 0xC9	; 201
 238:	01 c0       	rjmp	.+2      	; 0x23c <uart_writehex8+0x2c>
 23a:	80 5d       	subi	r24, 0xD0	; 208
 23c:	cf 91       	pop	r28
 23e:	0c 94 2d 02 	jmp	0x45a	; 0x45a <serial_writechar>

00000242 <uart_writehex16>:
 242:	cf 93       	push	r28
 244:	c8 2f       	mov	r28, r24
 246:	89 2f       	mov	r24, r25
 248:	0e 94 08 01 	call	0x210	; 0x210 <uart_writehex8>
 24c:	8c 2f       	mov	r24, r28
 24e:	cf 91       	pop	r28
 250:	0c 94 08 01 	jmp	0x210	; 0x210 <uart_writehex8>

00000254 <uart_writedec32>:
 254:	8f 92       	push	r8
 256:	9f 92       	push	r9
 258:	af 92       	push	r10
 25a:	bf 92       	push	r11
 25c:	cf 92       	push	r12
 25e:	df 92       	push	r13
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	00 d0       	rcall	.+0      	; 0x26e <uart_writedec32+0x1a>
 26e:	00 d0       	rcall	.+0      	; 0x270 <uart_writedec32+0x1c>
 270:	1f 92       	push	r1
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
 276:	9c 01       	movw	r18, r24
 278:	97 ff       	sbrs	r25, 7
 27a:	07 c0       	rjmp	.+14     	; 0x28a <uart_writedec32+0x36>
 27c:	31 95       	neg	r19
 27e:	21 95       	neg	r18
 280:	31 09       	sbc	r19, r1
 282:	aa 24       	eor	r10, r10
 284:	a3 94       	inc	r10
 286:	b1 2c       	mov	r11, r1
 288:	02 c0       	rjmp	.+4      	; 0x28e <uart_writedec32+0x3a>
 28a:	a1 2c       	mov	r10, r1
 28c:	b1 2c       	mov	r11, r1
 28e:	ce 01       	movw	r24, r28
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	7c 01       	movw	r14, r24
 294:	8e 01       	movw	r16, r28
 296:	0a 5f       	subi	r16, 0xFA	; 250
 298:	1f 4f       	sbci	r17, 0xFF	; 255
 29a:	fc 01       	movw	r30, r24
 29c:	cc 24       	eor	r12, r12
 29e:	c3 94       	inc	r12
 2a0:	d1 2c       	mov	r13, r1
 2a2:	4a e0       	ldi	r20, 0x0A	; 10
 2a4:	4c 9d       	mul	r20, r12
 2a6:	40 01       	movw	r8, r0
 2a8:	4d 9d       	mul	r20, r13
 2aa:	90 0c       	add	r9, r0
 2ac:	11 24       	eor	r1, r1
 2ae:	c9 01       	movw	r24, r18
 2b0:	b4 01       	movw	r22, r8
 2b2:	0e 94 a8 02 	call	0x550	; 0x550 <__divmodhi4>
 2b6:	b6 01       	movw	r22, r12
 2b8:	0e 94 a8 02 	call	0x550	; 0x550 <__divmodhi4>
 2bc:	61 93       	st	Z+, r22
 2be:	26 1b       	sub	r18, r22
 2c0:	31 09       	sbc	r19, r1
 2c2:	67 fd       	sbrc	r22, 7
 2c4:	33 95       	inc	r19
 2c6:	64 01       	movw	r12, r8
 2c8:	e0 17       	cp	r30, r16
 2ca:	f1 07       	cpc	r31, r17
 2cc:	59 f7       	brne	.-42     	; 0x2a4 <uart_writedec32+0x50>
 2ce:	ab 28       	or	r10, r11
 2d0:	11 f0       	breq	.+4      	; 0x2d6 <uart_writedec32+0x82>
 2d2:	8d e2       	ldi	r24, 0x2D	; 45
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <uart_writedec32+0x84>
 2d6:	80 e2       	ldi	r24, 0x20	; 32
 2d8:	0e 94 2d 02 	call	0x45a	; 0x45a <serial_writechar>
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	f8 01       	movw	r30, r16
 2e2:	82 91       	ld	r24, -Z
 2e4:	8f 01       	movw	r16, r30
 2e6:	81 11       	cpse	r24, r1
 2e8:	06 c0       	rjmp	.+12     	; 0x2f6 <uart_writedec32+0xa2>
 2ea:	21 15       	cp	r18, r1
 2ec:	31 05       	cpc	r19, r1
 2ee:	19 f4       	brne	.+6      	; 0x2f6 <uart_writedec32+0xa2>
 2f0:	ee 15       	cp	r30, r14
 2f2:	ff 05       	cpc	r31, r15
 2f4:	29 f4       	brne	.+10     	; 0x300 <uart_writedec32+0xac>
 2f6:	80 5d       	subi	r24, 0xD0	; 208
 2f8:	0e 94 2d 02 	call	0x45a	; 0x45a <serial_writechar>
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	0e 15       	cp	r16, r14
 302:	1f 05       	cpc	r17, r15
 304:	69 f7       	brne	.-38     	; 0x2e0 <uart_writedec32+0x8c>
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	0f 90       	pop	r0
 30c:	0f 90       	pop	r0
 30e:	0f 90       	pop	r0
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	ff 90       	pop	r15
 31a:	ef 90       	pop	r14
 31c:	df 90       	pop	r13
 31e:	cf 90       	pop	r12
 320:	bf 90       	pop	r11
 322:	af 90       	pop	r10
 324:	9f 90       	pop	r9
 326:	8f 90       	pop	r8
 328:	08 95       	ret

0000032a <serial_init>:
 32a:	10 92 c0 00 	sts	0x00C0, r1
 32e:	87 e6       	ldi	r24, 0x67	; 103
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 c5 00 	sts	0x00C5, r25
 336:	80 93 c4 00 	sts	0x00C4, r24
 33a:	e1 ec       	ldi	r30, 0xC1	; 193
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	88 e1       	ldi	r24, 0x18	; 24
 340:	80 83       	st	Z, r24
 342:	86 e0       	ldi	r24, 0x06	; 6
 344:	80 93 c2 00 	sts	0x00C2, r24
 348:	80 81       	ld	r24, Z
 34a:	80 6a       	ori	r24, 0xA0	; 160
 34c:	80 83       	st	Z, r24
 34e:	08 95       	ret

00000350 <__vector_18>:
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	2f 93       	push	r18
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
 360:	ef 93       	push	r30
 362:	ff 93       	push	r31
 364:	80 91 3c 01 	lds	r24, 0x013C
 368:	20 91 3d 01 	lds	r18, 0x013D
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	82 1b       	sub	r24, r18
 370:	91 09       	sbc	r25, r1
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	8f 73       	andi	r24, 0x3F	; 63
 376:	99 27       	eor	r25, r25
 378:	89 2b       	or	r24, r25
 37a:	79 f0       	breq	.+30     	; 0x39a <__vector_18+0x4a>
 37c:	e0 91 3d 01 	lds	r30, 0x013D
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 91 c6 00 	lds	r24, 0x00C6
 386:	e2 5c       	subi	r30, 0xC2	; 194
 388:	fe 4f       	sbci	r31, 0xFE	; 254
 38a:	80 83       	st	Z, r24
 38c:	80 91 3d 01 	lds	r24, 0x013D
 390:	8f 5f       	subi	r24, 0xFF	; 255
 392:	8f 73       	andi	r24, 0x3F	; 63
 394:	80 93 3d 01 	sts	0x013D, r24
 398:	02 c0       	rjmp	.+4      	; 0x39e <__vector_18+0x4e>
 39a:	80 91 c6 00 	lds	r24, 0x00C6
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	2f 91       	pop	r18
 3a8:	0f 90       	pop	r0
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	0f 90       	pop	r0
 3ae:	1f 90       	pop	r1
 3b0:	18 95       	reti

000003b2 <__vector_19>:
 3b2:	1f 92       	push	r1
 3b4:	0f 92       	push	r0
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	0f 92       	push	r0
 3ba:	11 24       	eor	r1, r1
 3bc:	2f 93       	push	r18
 3be:	8f 93       	push	r24
 3c0:	9f 93       	push	r25
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
 3c6:	80 91 3b 01 	lds	r24, 0x013B
 3ca:	20 91 3a 01 	lds	r18, 0x013A
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	82 1b       	sub	r24, r18
 3d2:	91 09       	sbc	r25, r1
 3d4:	8f 73       	andi	r24, 0x3F	; 63
 3d6:	99 27       	eor	r25, r25
 3d8:	89 2b       	or	r24, r25
 3da:	79 f0       	breq	.+30     	; 0x3fa <__vector_19+0x48>
 3dc:	e0 91 3a 01 	lds	r30, 0x013A
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	e2 58       	subi	r30, 0x82	; 130
 3e4:	fe 4f       	sbci	r31, 0xFE	; 254
 3e6:	80 81       	ld	r24, Z
 3e8:	80 93 c6 00 	sts	0x00C6, r24
 3ec:	80 91 3a 01 	lds	r24, 0x013A
 3f0:	8f 5f       	subi	r24, 0xFF	; 255
 3f2:	8f 73       	andi	r24, 0x3F	; 63
 3f4:	80 93 3a 01 	sts	0x013A, r24
 3f8:	05 c0       	rjmp	.+10     	; 0x404 <__vector_19+0x52>
 3fa:	80 91 c1 00 	lds	r24, 0x00C1
 3fe:	8f 7d       	andi	r24, 0xDF	; 223
 400:	80 93 c1 00 	sts	0x00C1, r24
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	9f 91       	pop	r25
 40a:	8f 91       	pop	r24
 40c:	2f 91       	pop	r18
 40e:	0f 90       	pop	r0
 410:	0f be       	out	0x3f, r0	; 63
 412:	0f 90       	pop	r0
 414:	1f 90       	pop	r1
 416:	18 95       	reti

00000418 <serial_rxchars>:
 418:	80 91 3d 01 	lds	r24, 0x013D
 41c:	90 91 3c 01 	lds	r25, 0x013C
 420:	89 1b       	sub	r24, r25
 422:	8f 73       	andi	r24, 0x3F	; 63
 424:	08 95       	ret

00000426 <serial_popchar>:
 426:	80 91 3d 01 	lds	r24, 0x013D
 42a:	20 91 3c 01 	lds	r18, 0x013C
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	82 1b       	sub	r24, r18
 432:	91 09       	sbc	r25, r1
 434:	8f 73       	andi	r24, 0x3F	; 63
 436:	99 27       	eor	r25, r25
 438:	89 2b       	or	r24, r25
 43a:	69 f0       	breq	.+26     	; 0x456 <serial_popchar+0x30>
 43c:	e0 91 3c 01 	lds	r30, 0x013C
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	e2 5c       	subi	r30, 0xC2	; 194
 444:	fe 4f       	sbci	r31, 0xFE	; 254
 446:	80 81       	ld	r24, Z
 448:	90 91 3c 01 	lds	r25, 0x013C
 44c:	9f 5f       	subi	r25, 0xFF	; 255
 44e:	9f 73       	andi	r25, 0x3F	; 63
 450:	90 93 3c 01 	sts	0x013C, r25
 454:	08 95       	ret
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	08 95       	ret

0000045a <serial_writechar>:
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	07 fe       	sbrs	r0, 7
 45e:	0e c0       	rjmp	.+28     	; 0x47c <serial_writechar+0x22>
 460:	20 91 3a 01 	lds	r18, 0x013A
 464:	90 91 3b 01 	lds	r25, 0x013B
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	29 1b       	sub	r18, r25
 46c:	31 09       	sbc	r19, r1
 46e:	21 50       	subi	r18, 0x01	; 1
 470:	31 09       	sbc	r19, r1
 472:	2f 73       	andi	r18, 0x3F	; 63
 474:	33 27       	eor	r19, r19
 476:	23 2b       	or	r18, r19
 478:	99 f3       	breq	.-26     	; 0x460 <serial_writechar+0x6>
 47a:	0d c0       	rjmp	.+26     	; 0x496 <serial_writechar+0x3c>
 47c:	20 91 3a 01 	lds	r18, 0x013A
 480:	90 91 3b 01 	lds	r25, 0x013B
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	29 1b       	sub	r18, r25
 488:	31 09       	sbc	r19, r1
 48a:	21 50       	subi	r18, 0x01	; 1
 48c:	31 09       	sbc	r19, r1
 48e:	2f 73       	andi	r18, 0x3F	; 63
 490:	33 27       	eor	r19, r19
 492:	23 2b       	or	r18, r19
 494:	61 f0       	breq	.+24     	; 0x4ae <serial_writechar+0x54>
 496:	e0 91 3b 01 	lds	r30, 0x013B
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	e2 58       	subi	r30, 0x82	; 130
 49e:	fe 4f       	sbci	r31, 0xFE	; 254
 4a0:	80 83       	st	Z, r24
 4a2:	80 91 3b 01 	lds	r24, 0x013B
 4a6:	8f 5f       	subi	r24, 0xFF	; 255
 4a8:	8f 73       	andi	r24, 0x3F	; 63
 4aa:	80 93 3b 01 	sts	0x013B, r24
 4ae:	80 91 c1 00 	lds	r24, 0x00C1
 4b2:	80 62       	ori	r24, 0x20	; 32
 4b4:	80 93 c1 00 	sts	0x00C1, r24
 4b8:	08 95       	ret

000004ba <serial_writestr>:
 4ba:	1f 93       	push	r17
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	ec 01       	movw	r28, r24
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	11 e0       	ldi	r17, 0x01	; 1
 4c6:	19 0f       	add	r17, r25
 4c8:	fe 01       	movw	r30, r28
 4ca:	e9 0f       	add	r30, r25
 4cc:	f1 1d       	adc	r31, r1
 4ce:	80 81       	ld	r24, Z
 4d0:	88 23       	and	r24, r24
 4d2:	21 f0       	breq	.+8      	; 0x4dc <serial_writestr+0x22>
 4d4:	0e 94 2d 02 	call	0x45a	; 0x45a <serial_writechar>
 4d8:	91 2f       	mov	r25, r17
 4da:	f4 cf       	rjmp	.-24     	; 0x4c4 <serial_writestr+0xa>
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	1f 91       	pop	r17
 4e2:	08 95       	ret

000004e4 <serial_writestr_P>:
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	ec 01       	movw	r28, r24
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	11 e0       	ldi	r17, 0x01	; 1
 4f0:	19 0f       	add	r17, r25
 4f2:	fe 01       	movw	r30, r28
 4f4:	e9 0f       	add	r30, r25
 4f6:	f1 1d       	adc	r31, r1
 4f8:	84 91       	lpm	r24, Z
 4fa:	88 23       	and	r24, r24
 4fc:	21 f0       	breq	.+8      	; 0x506 <serial_writestr_P+0x22>
 4fe:	0e 94 2d 02 	call	0x45a	; 0x45a <serial_writechar>
 502:	91 2f       	mov	r25, r17
 504:	f4 cf       	rjmp	.-24     	; 0x4ee <serial_writestr_P+0xa>
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	1f 91       	pop	r17
 50c:	08 95       	ret

0000050e <main>:
#include "temp.h"

int main(void)
{

    uart_init();
 50e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <uart_init>
    led_init();
 512:	0e 94 b4 00 	call	0x168	; 0x168 <led_init>
    temp_init();
 516:	0e 94 53 00 	call	0xa6	; 0xa6 <temp_init>
    uart_writestr("SER486 HW5 - Nubian Tesfai\n\r");
 51a:	82 e0       	ldi	r24, 0x02	; 2
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <uart_writestr>
    uart_writestr("this won't get called...\n\r");
 522:	8f e1       	ldi	r24, 0x1F	; 31
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <uart_writestr>
    while(1) {
        uart_writestr("this won't get called...\n\r");
 52a:	8f e1       	ldi	r24, 0x1F	; 31
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <uart_writestr>
        temp_start();
 532:	0e 94 69 00 	call	0xd2	; 0xd2 <temp_start>
        while(!temp_is_data_ready());
 536:	0e 94 5e 00 	call	0xbc	; 0xbc <temp_is_data_ready>
 53a:	89 2b       	or	r24, r25
 53c:	e1 f3       	breq	.-8      	; 0x536 <main+0x28>
        uart_writedec32(temp_get());
 53e:	0e 94 6f 00 	call	0xde	; 0xde <temp_get>
 542:	0e 94 2a 01 	call	0x254	; 0x254 <uart_writedec32>
        delay(1000);
 546:	88 ee       	ldi	r24, 0xE8	; 232
 548:	93 e0       	ldi	r25, 0x03	; 3
 54a:	0e 94 8b 00 	call	0x116	; 0x116 <delay>
    }
 54e:	ed cf       	rjmp	.-38     	; 0x52a <main+0x1c>

00000550 <__divmodhi4>:
 550:	97 fb       	bst	r25, 7
 552:	07 2e       	mov	r0, r23
 554:	16 f4       	brtc	.+4      	; 0x55a <__divmodhi4+0xa>
 556:	00 94       	com	r0
 558:	07 d0       	rcall	.+14     	; 0x568 <__divmodhi4_neg1>
 55a:	77 fd       	sbrc	r23, 7
 55c:	09 d0       	rcall	.+18     	; 0x570 <__divmodhi4_neg2>
 55e:	0e 94 bc 02 	call	0x578	; 0x578 <__udivmodhi4>
 562:	07 fc       	sbrc	r0, 7
 564:	05 d0       	rcall	.+10     	; 0x570 <__divmodhi4_neg2>
 566:	3e f4       	brtc	.+14     	; 0x576 <__divmodhi4_exit>

00000568 <__divmodhi4_neg1>:
 568:	90 95       	com	r25
 56a:	81 95       	neg	r24
 56c:	9f 4f       	sbci	r25, 0xFF	; 255
 56e:	08 95       	ret

00000570 <__divmodhi4_neg2>:
 570:	70 95       	com	r23
 572:	61 95       	neg	r22
 574:	7f 4f       	sbci	r23, 0xFF	; 255

00000576 <__divmodhi4_exit>:
 576:	08 95       	ret

00000578 <__udivmodhi4>:
 578:	aa 1b       	sub	r26, r26
 57a:	bb 1b       	sub	r27, r27
 57c:	51 e1       	ldi	r21, 0x11	; 17
 57e:	07 c0       	rjmp	.+14     	; 0x58e <__udivmodhi4_ep>

00000580 <__udivmodhi4_loop>:
 580:	aa 1f       	adc	r26, r26
 582:	bb 1f       	adc	r27, r27
 584:	a6 17       	cp	r26, r22
 586:	b7 07       	cpc	r27, r23
 588:	10 f0       	brcs	.+4      	; 0x58e <__udivmodhi4_ep>
 58a:	a6 1b       	sub	r26, r22
 58c:	b7 0b       	sbc	r27, r23

0000058e <__udivmodhi4_ep>:
 58e:	88 1f       	adc	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	5a 95       	dec	r21
 594:	a9 f7       	brne	.-22     	; 0x580 <__udivmodhi4_loop>
 596:	80 95       	com	r24
 598:	90 95       	com	r25
 59a:	bc 01       	movw	r22, r24
 59c:	cd 01       	movw	r24, r26
 59e:	08 95       	ret

000005a0 <_exit>:
 5a0:	f8 94       	cli

000005a2 <__stop_program>:
 5a2:	ff cf       	rjmp	.-2      	; 0x5a2 <__stop_program>
